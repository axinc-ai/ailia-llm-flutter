// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Written for the FFI article
class ailiaLlmFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ailiaLlmFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ailiaLlmFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// \~japanese
  /// @brief 利用可能な計算環境(CPU, GPU)の数を取得します
  /// @param env_count 計算環境情報の数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the number of available computational environments (CPU, GPU).
  /// @param env_count The storage location of the number of computational environment information
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  int ailiaLLMGetBackendCount(
    ffi.Pointer<ffi.UnsignedInt> env_count,
  ) {
    return _ailiaLLMGetBackendCount(
      env_count,
    );
  }

  late final _ailiaLLMGetBackendCountPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'ailiaLLMGetBackendCount');
  late final _ailiaLLMGetBackendCount = _ailiaLLMGetBackendCountPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 計算環境の一覧を取得します
  /// @param env 計算環境情報の格納先(AILIANetworkインスタンスを破棄するまで有効)
  /// @param env_idx 計算環境情報のインデックス(0～ ailiaLLMGetBackendCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the list of computational environments.
  /// @param env The storage location of the computational environment information (valid until the AILIANetwork instance
  /// is destroyed)
  /// @param env_idx The index of the computational environment information (0 to  ailiaLLMGetBackendCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  int ailiaLLMGetBackendName(
    ffi.Pointer<ffi.Pointer<ffi.Char>> env,
    int env_idx,
  ) {
    return _ailiaLLMGetBackendName(
      env,
      env_idx,
    );
  }

  late final _ailiaLLMGetBackendNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedInt)>>('ailiaLLMGetBackendName');
  late final _ailiaLLMGetBackendName = _ailiaLLMGetBackendNamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// \~japanese
  /// @brief LLMオブジェクトを作成します。
  /// @param llm LLMオブジェクトポインタへのポインタ
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// LLMオブジェクトを作成します。
  ///
  /// \~english
  /// @brief Creates a LLM instance.
  /// @param llm A pointer to the LLM instance pointer
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Creates a LLM instance.
  int ailiaLLMCreate(
    ffi.Pointer<ffi.Pointer<AILIALLM>> llm,
  ) {
    return _ailiaLLMCreate(
      llm,
    );
  }

  late final _ailiaLLMCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<AILIALLM>>)>>('ailiaLLMCreate');
  late final _ailiaLLMCreate = _ailiaLLMCreatePtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<AILIALLM>>)>();

  /// \~japanese
  /// @brief モデルファイルを読み込みます。
  /// @param llm LLMオブジェクトポインタへのポインタ
  /// @param path GGUFファイルのパス
  /// @param n_ctx コンテキスト長（0でモデルのデフォルト）
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// GGUFのモデルファイルを読み込みます。
  ///
  /// \~english
  /// @brief Open model file.
  /// @param llm A pointer to the LLM instance pointer
  /// @param path Path for GGUF
  /// @param n_ctx Context length for model (0 is model default）
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Open a model file for GGUF.
  int ailiaLLMOpenModelFileA(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<ffi.Char> path,
    int n_ctx,
  ) {
    return _ailiaLLMOpenModelFileA(
      llm,
      path,
      n_ctx,
    );
  }

  late final _ailiaLLMOpenModelFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ailiaLLMOpenModelFileA');
  late final _ailiaLLMOpenModelFileA = _ailiaLLMOpenModelFileAPtr.asFunction<
      int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.Char>, int)>();

  int ailiaLLMOpenModelFileW(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<ffi.WChar> path,
    int n_ctx,
  ) {
    return _ailiaLLMOpenModelFileW(
      llm,
      path,
      n_ctx,
    );
  }

  late final _ailiaLLMOpenModelFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt)>>('ailiaLLMOpenModelFileW');
  late final _ailiaLLMOpenModelFileW = _ailiaLLMOpenModelFileWPtr.asFunction<
      int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.WChar>, int)>();

  /// \~japanese
  /// @brief コンテキストの長さを取得します。
  /// @param llm   LLMオブジェクトポインタ
  /// @param len  コンテキストの長さ
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the size of context.
  /// @param llm   A LLM instance pointer
  /// @param len  The length of context
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  int ailiaLLMGetContextSize(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<ffi.UnsignedInt> context_size,
  ) {
    return _ailiaLLMGetContextSize(
      llm,
      context_size,
    );
  }

  late final _ailiaLLMGetContextSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaLLMGetContextSize');
  late final _ailiaLLMGetContextSize = _ailiaLLMGetContextSizePtr.asFunction<
      int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief サンプリングのパラメータを設定します。
  /// @param llm LLMオブジェクトポインタへのポインタ
  /// @param top_k サンプリングする確率値の上位個数、デフォルト40
  /// @param top_p サンプリングする確率値の範囲、デフォルト0.9（0.9〜1.0）
  /// @param temp 温度パラメータ、デフォルト0.4
  /// @param dist シード、デフォルト1234
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// LLMのサンプリングの設定を行います。ailiaLLMSetPromptの前に実行する必要があります。
  ///
  /// \~english
  /// @brief Set the sampling parameter.
  /// @param llm A pointer to the LLM instance pointer
  /// @param top_k Sampling probability value's top number, default 40
  /// @param top_p Sampling probability value range, default 0.9 (0.9 to 1.0)
  /// @param temp Temperature parameter, default 0.4
  /// @param dist Seed, default 1234
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Set LLM sampling parameters. Must be run before ailiaLLMSetPrompt.
  int ailiaLLMSetSamplingParams(
    ffi.Pointer<AILIALLM> llm,
    int top_k,
    double top_p,
    double temp,
    int dist,
  ) {
    return _ailiaLLMSetSamplingParams(
      llm,
      top_k,
      top_p,
      temp,
      dist,
    );
  }

  late final _ailiaLLMSetSamplingParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>, ffi.UnsignedInt, ffi.Float,
              ffi.Float, ffi.UnsignedInt)>>('ailiaLLMSetSamplingParams');
  late final _ailiaLLMSetSamplingParams =
      _ailiaLLMSetSamplingParamsPtr.asFunction<
          int Function(ffi.Pointer<AILIALLM>, int, double, double, int)>();

  /// \~japanese
  /// @brief プロンプトを設定します。
  /// @param llm LLMオブジェクトポインタへのポインタ
  /// @param message メッセージの配列
  /// @param message_cnt メッセージの数
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// LLMに問い合わせるプロンプトを設定します。
  /// ChatHistoryもmessageに含めてください。
  ///
  /// \~english
  /// @brief Set the prompt.
  /// @param llm A pointer to the LLM instance pointer
  /// @param message Array of messages
  /// @param message_cnt Number of messages
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Set the prompt to query the LLM.
  /// Please include ChatHistory in the message as well.
  int ailiaLLMSetPrompt(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<AILIALLMChatMessage> message,
    int message_cnt,
  ) {
    return _ailiaLLMSetPrompt(
      llm,
      message,
      message_cnt,
    );
  }

  late final _ailiaLLMSetPromptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIALLM>,
              ffi.Pointer<AILIALLMChatMessage>,
              ffi.UnsignedInt)>>('ailiaLLMSetPrompt');
  late final _ailiaLLMSetPrompt = _ailiaLLMSetPromptPtr.asFunction<
      int Function(
          ffi.Pointer<AILIALLM>, ffi.Pointer<AILIALLMChatMessage>, int)>();

  /// \~japanese
  /// @brief 生成を行います。
  /// @param llm LLMオブジェクトポインタ
  /// @param done 生成が完了したか
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// デコードした結果はailiaLLMGetDeltaText APIで取得します。
  /// ailiaLLMGenerateを呼び出すたびに1トークンずつデコードします。
  /// doneは0か1を取ります。doneが1の場合、生成完了となります。
  ///
  /// \~english
  /// @brief Perform generate
  /// @param llm A LLM instance pointer
  /// @param done Generation complete?
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// The decoded result is obtained through the ailiaLLMGetDeltaText API.
  /// Each call to ailiaLLMGenerate decodes one token at a time.
  /// The value of done is 0 or 1. If done is 1, the generation is complete.
  int ailiaLLMGenerate(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<ffi.UnsignedInt> done,
  ) {
    return _ailiaLLMGenerate(
      llm,
      done,
    );
  }

  late final _ailiaLLMGeneratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaLLMGenerate');
  late final _ailiaLLMGenerate = _ailiaLLMGeneratePtr.asFunction<
      int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief テキストの長さを取得します。(NULL文字含む)
  /// @param llm       LLMオブジェクトポインタ
  /// @param buf_size  テキストの長さ
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the size of text. (Include null)
  /// @param llm       A LLM instance pointer
  /// @param buf_size  The length of text
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  int ailiaLLMGetDeltaTextSize(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<ffi.UnsignedInt> buf_size,
  ) {
    return _ailiaLLMGetDeltaTextSize(
      llm,
      buf_size,
    );
  }

  late final _ailiaLLMGetDeltaTextSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaLLMGetDeltaTextSize');
  late final _ailiaLLMGetDeltaTextSize =
      _ailiaLLMGetDeltaTextSizePtr.asFunction<
          int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief テキストを取得します。
  /// @param llm       LLMオブジェクトポインタ
  /// @param text      テキスト(UTF8)
  /// @param buf_size  バッファサイズ
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaLLMGenerate() を一度も実行していない場合は \ref AILIA_LLM_STATUS_INVALID_STATE が返ります。
  ///
  /// \~english
  /// @brief Gets the decoded text.
  /// @param llm       A LLM instance pointer
  /// @param text      Text(UTF8)
  /// @param buf_size  Buffer size
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// If  ailiaLLMGenerate()  is not run at all, the function returns  \ref AILIA_LLM_STATUS_INVALID_STATE .
  int ailiaLLMGetDeltaText(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<ffi.Char> text,
    int buf_size,
  ) {
    return _ailiaLLMGetDeltaText(
      llm,
      text,
      buf_size,
    );
  }

  late final _ailiaLLMGetDeltaTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ailiaLLMGetDeltaText');
  late final _ailiaLLMGetDeltaText = _ailiaLLMGetDeltaTextPtr.asFunction<
      int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.Char>, int)>();

  /// \~japanese
  /// @brief トークンの数を取得します。
  /// @param llm   LLMオブジェクトポインタ
  /// @param cnt   トークンの数
  /// @param text  テキスト(UTF8)
  /// @return
  /// 成功した場合は \ref AILIA_LLM_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the count of token.
  /// @param llm   A LLM instance pointer
  /// @param cnt   The count of token
  /// @param text  Text(UTF8)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_LLM_STATUS_SUCCESS , or an error code otherwise.
  int ailiaLLMGetTokenCount(
    ffi.Pointer<AILIALLM> llm,
    ffi.Pointer<ffi.UnsignedInt> cnt,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _ailiaLLMGetTokenCount(
      llm,
      cnt,
      text,
    );
  }

  late final _ailiaLLMGetTokenCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Char>)>>('ailiaLLMGetTokenCount');
  late final _ailiaLLMGetTokenCount = _ailiaLLMGetTokenCountPtr.asFunction<
      int Function(ffi.Pointer<AILIALLM>, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.Char>)>();

  /// \~japanese
  /// @brief LLMオブジェクトを破棄します。
  /// @param llm LLMオブジェクトポインタ
  ///
  /// \~english
  /// @brief It destroys the LLM instance.
  /// @param llm A LLM instance pointer
  void ailiaLLMDestroy(
    ffi.Pointer<AILIALLM> llm,
  ) {
    return _ailiaLLMDestroy(
      llm,
    );
  }

  late final _ailiaLLMDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AILIALLM>)>>(
          'ailiaLLMDestroy');
  late final _ailiaLLMDestroy =
      _ailiaLLMDestroyPtr.asFunction<void Function(ffi.Pointer<AILIALLM>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

/// チャットメッセージ
final class _AILIALLMChatMessage extends ffi.Struct {
  /// @brief Represent the role. (system, user, assistant)
  external ffi.Pointer<ffi.Char> role;

  /// @brief Represent the content of the message.
  external ffi.Pointer<ffi.Char> content;
}

/// LLMオブジェクトのインスタンス
final class AILIALLM extends ffi.Opaque {}

/// チャットメッセージ
typedef AILIALLMChatMessage = _AILIALLMChatMessage;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int AILIA_LLM_STATUS_SUCCESS = 0;

const int AILIA_LLM_STATUS_INVALID_ARGUMENT = -1;

const int AILIA_LLM_STATUS_ERROR_FILE_API = -2;

const int AILIA_LLM_STATUS_INVALID_VERSION = -3;

const int AILIA_LLM_STATUS_BROKEN = -4;

const int AILIA_LLM_STATUS_MEMORY_INSUFFICIENT = -5;

const int AILIA_LLM_STATUS_THREAD_ERROR = -6;

const int AILIA_LLM_STATUS_INVALID_STATE = -7;

const int AILIA_LLM_STATUS_CONTEXT_FULL = -8;

const int AILIA_LLM_STATUS_UNIMPLEMENTED = -15;

const int AILIA_LLM_STATUS_OTHER_ERROR = -128;
